{"dependencies":[{"name":"../Subject","loc":{"line":1,"column":24}},{"name":"../scheduler/async","loc":{"line":2,"column":31}},{"name":"../Subscription","loc":{"line":3,"column":29}},{"name":"../util/lift","loc":{"line":4,"column":24}},{"name":"./OperatorSubscriber","loc":{"line":5,"column":41}},{"name":"../util/arrRemove","loc":{"line":6,"column":26}},{"name":"../util/args","loc":{"line":7,"column":29}},{"name":"../util/executeSchedule","loc":{"line":8,"column":32}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.windowTime = windowTime;\n\nvar _Subject = require(\"../Subject\");\n\nvar _async = require(\"../scheduler/async\");\n\nvar _Subscription = require(\"../Subscription\");\n\nvar _lift = require(\"../util/lift\");\n\nvar _OperatorSubscriber = require(\"./OperatorSubscriber\");\n\nvar _arrRemove = require(\"../util/arrRemove\");\n\nvar _args = require(\"../util/args\");\n\nvar _executeSchedule = require(\"../util/executeSchedule\");\n\nfunction windowTime(windowTimeSpan) {\n  var _a, _b;\n  var otherArgs = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    otherArgs[_i - 1] = arguments[_i];\n  }\n  var scheduler = (_a = (0, _args.popScheduler)(otherArgs)) !== null && _a !== void 0 ? _a : _async.asyncScheduler;\n  var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n  var maxWindowSize = otherArgs[1] || Infinity;\n  return (0, _lift.operate)(function (source, subscriber) {\n    var windowRecords = [];\n    var restartOnClose = false;\n    var closeWindow = function (record) {\n      var window = record.window,\n          subs = record.subs;\n      window.complete();\n      subs.unsubscribe();\n      (0, _arrRemove.arrRemove)(windowRecords, record);\n      restartOnClose && startWindow();\n    };\n    var startWindow = function () {\n      if (windowRecords) {\n        var subs = new _Subscription.Subscription();\n        subscriber.add(subs);\n        var window_1 = new _Subject.Subject();\n        var record_1 = {\n          window: window_1,\n          subs: subs,\n          seen: 0\n        };\n        windowRecords.push(record_1);\n        subscriber.next(window_1.asObservable());\n        (0, _executeSchedule.executeSchedule)(subs, scheduler, function () {\n          return closeWindow(record_1);\n        }, windowTimeSpan);\n      }\n    };\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      (0, _executeSchedule.executeSchedule)(subscriber, scheduler, startWindow, windowCreationInterval, true);\n    } else {\n      restartOnClose = true;\n    }\n    startWindow();\n    var loop = function (cb) {\n      return windowRecords.slice().forEach(cb);\n    };\n    var terminate = function (cb) {\n      loop(function (_a) {\n        var window = _a.window;\n        return cb(window);\n      });\n      cb(subscriber);\n      subscriber.unsubscribe();\n    };\n    source.subscribe((0, _OperatorSubscriber.createOperatorSubscriber)(subscriber, function (value) {\n      loop(function (record) {\n        record.window.next(value);\n        maxWindowSize <= ++record.seen && closeWindow(record);\n      });\n    }, function () {\n      return terminate(function (consumer) {\n        return consumer.complete();\n      });\n    }, function (err) {\n      return terminate(function (consumer) {\n        return consumer.error(err);\n      });\n    }));\n    return function () {\n      windowRecords = null;\n    };\n  });\n}\n//# sourceMappingURL=windowTime.js.map"},"hash":"364799fa5c0578bfac52b926e347129c"}