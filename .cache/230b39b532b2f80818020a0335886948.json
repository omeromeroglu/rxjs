{"dependencies":[{"name":"tslib","loc":{"line":1,"column":23}},{"name":"../observable/innerFrom","loc":{"line":2,"column":26}},{"name":"../Observable","loc":{"line":3,"column":27}},{"name":"../operators/mergeMap","loc":{"line":4,"column":25}},{"name":"../util/isArrayLike","loc":{"line":5,"column":28}},{"name":"../util/isFunction","loc":{"line":6,"column":27}},{"name":"../util/mapOneOrManyArgs","loc":{"line":7,"column":33}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromEvent = fromEvent;\n\nvar _tslib = require(\"tslib\");\n\nvar _innerFrom = require(\"../observable/innerFrom\");\n\nvar _Observable = require(\"../Observable\");\n\nvar _mergeMap = require(\"../operators/mergeMap\");\n\nvar _isArrayLike = require(\"../util/isArrayLike\");\n\nvar _isFunction = require(\"../util/isFunction\");\n\nvar _mapOneOrManyArgs = require(\"../util/mapOneOrManyArgs\");\n\nvar nodeEventEmitterMethods = ['addListener', 'removeListener'];\nvar eventTargetMethods = ['addEventListener', 'removeEventListener'];\nvar jqueryMethods = ['on', 'off'];\nfunction fromEvent(target, eventName, options, resultSelector) {\n  if ((0, _isFunction.isFunction)(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    return fromEvent(target, eventName, options).pipe((0, _mapOneOrManyArgs.mapOneOrManyArgs)(resultSelector));\n  }\n  var _a = (0, _tslib.__read)(isEventTarget(target) ? eventTargetMethods.map(function (methodName) {\n    return function (handler) {\n      return target[methodName](eventName, handler, options);\n    };\n  }) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [], 2),\n      add = _a[0],\n      remove = _a[1];\n  if (!add) {\n    if ((0, _isArrayLike.isArrayLike)(target)) {\n      return (0, _mergeMap.mergeMap)(function (subTarget) {\n        return fromEvent(subTarget, eventName, options);\n      })((0, _innerFrom.innerFrom)(target));\n    }\n  }\n  if (!add) {\n    throw new TypeError('Invalid event target');\n  }\n  return new _Observable.Observable(function (subscriber) {\n    var handler = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return subscriber.next(1 < args.length ? args : args[0]);\n    };\n    add(handler);\n    return function () {\n      return remove(handler);\n    };\n  });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n  return function (methodName) {\n    return function (handler) {\n      return target[methodName](eventName, handler);\n    };\n  };\n}\nfunction isNodeStyleEventEmitter(target) {\n  return (0, _isFunction.isFunction)(target.addListener) && (0, _isFunction.isFunction)(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n  return (0, _isFunction.isFunction)(target.on) && (0, _isFunction.isFunction)(target.off);\n}\nfunction isEventTarget(target) {\n  return (0, _isFunction.isFunction)(target.addEventListener) && (0, _isFunction.isFunction)(target.removeEventListener);\n}\n//# sourceMappingURL=fromEvent.js.map"},"hash":"5eab708353bdecdb159824d2c6c34bde"}