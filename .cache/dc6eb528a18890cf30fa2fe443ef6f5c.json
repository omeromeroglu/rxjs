{"dependencies":[{"name":"tslib","loc":{"line":1,"column":26}},{"name":"./util/isFunction","loc":{"line":2,"column":27}},{"name":"./Subscription","loc":{"line":3,"column":45}},{"name":"./config","loc":{"line":4,"column":23}},{"name":"./util/reportUnhandledError","loc":{"line":5,"column":37}},{"name":"./util/noop","loc":{"line":6,"column":21}},{"name":"./NotificationFactories","loc":{"line":7,"column":75}},{"name":"./scheduler/timeoutProvider","loc":{"line":8,"column":32}},{"name":"./util/errorContext","loc":{"line":9,"column":29}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EMPTY_OBSERVER = exports.SafeSubscriber = exports.Subscriber = undefined;\n\nvar _tslib = require(\"tslib\");\n\nvar _isFunction = require(\"./util/isFunction\");\n\nvar _Subscription = require(\"./Subscription\");\n\nvar _config = require(\"./config\");\n\nvar _reportUnhandledError = require(\"./util/reportUnhandledError\");\n\nvar _noop = require(\"./util/noop\");\n\nvar _NotificationFactories = require(\"./NotificationFactories\");\n\nvar _timeoutProvider = require(\"./scheduler/timeoutProvider\");\n\nvar _errorContext = require(\"./util/errorContext\");\n\nvar Subscriber = function (_super) {\n  (0, _tslib.__extends)(Subscriber, _super);\n  function Subscriber(destination) {\n    var _this = _super.call(this) || this;\n    _this.isStopped = false;\n    if (destination) {\n      _this.destination = destination;\n      if ((0, _Subscription.isSubscription)(destination)) {\n        destination.add(_this);\n      }\n    } else {\n      _this.destination = EMPTY_OBSERVER;\n    }\n    return _this;\n  }\n  Subscriber.create = function (next, error, complete) {\n    return new SafeSubscriber(next, error, complete);\n  };\n  Subscriber.prototype.next = function (value) {\n    if (this.isStopped) {\n      handleStoppedNotification((0, _NotificationFactories.nextNotification)(value), this);\n    } else {\n      this._next(value);\n    }\n  };\n  Subscriber.prototype.error = function (err) {\n    if (this.isStopped) {\n      handleStoppedNotification((0, _NotificationFactories.errorNotification)(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  };\n  Subscriber.prototype.complete = function () {\n    if (this.isStopped) {\n      handleStoppedNotification(_NotificationFactories.COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  };\n  Subscriber.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      this.isStopped = true;\n      _super.prototype.unsubscribe.call(this);\n      this.destination = null;\n    }\n  };\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n  Subscriber.prototype._error = function (err) {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  };\n  Subscriber.prototype._complete = function () {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  };\n  return Subscriber;\n}(_Subscription.Subscription);\nexports.Subscriber = Subscriber;\n\nvar _bind = Function.prototype.bind;\nfunction bind(fn, thisArg) {\n  return _bind.call(fn, thisArg);\n}\nvar ConsumerObserver = function () {\n  function ConsumerObserver(partialObserver) {\n    this.partialObserver = partialObserver;\n  }\n  ConsumerObserver.prototype.next = function (value) {\n    var partialObserver = this.partialObserver;\n    if (partialObserver.next) {\n      try {\n        partialObserver.next(value);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  };\n  ConsumerObserver.prototype.error = function (err) {\n    var partialObserver = this.partialObserver;\n    if (partialObserver.error) {\n      try {\n        partialObserver.error(err);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    } else {\n      handleUnhandledError(err);\n    }\n  };\n  ConsumerObserver.prototype.complete = function () {\n    var partialObserver = this.partialObserver;\n    if (partialObserver.complete) {\n      try {\n        partialObserver.complete();\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  };\n  return ConsumerObserver;\n}();\nvar SafeSubscriber = function (_super) {\n  (0, _tslib.__extends)(SafeSubscriber, _super);\n  function SafeSubscriber(observerOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n    var partialObserver;\n    if ((0, _isFunction.isFunction)(observerOrNext) || !observerOrNext) {\n      partialObserver = {\n        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,\n        error: error !== null && error !== void 0 ? error : undefined,\n        complete: complete !== null && complete !== void 0 ? complete : undefined\n      };\n    } else {\n      var context_1;\n      if (_this && _config.config.useDeprecatedNextContext) {\n        context_1 = Object.create(observerOrNext);\n        context_1.unsubscribe = function () {\n          return _this.unsubscribe();\n        };\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context_1),\n          error: observerOrNext.error && bind(observerOrNext.error, context_1),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)\n        };\n      } else {\n        partialObserver = observerOrNext;\n      }\n    }\n    _this.destination = new ConsumerObserver(partialObserver);\n    return _this;\n  }\n  return SafeSubscriber;\n}(Subscriber);\nexports.SafeSubscriber = SafeSubscriber;\n\nfunction handleUnhandledError(error) {\n  if (_config.config.useDeprecatedSynchronousErrorHandling) {\n    (0, _errorContext.captureError)(error);\n  } else {\n    (0, _reportUnhandledError.reportUnhandledError)(error);\n  }\n}\nfunction defaultErrorHandler(err) {\n  throw err;\n}\nfunction handleStoppedNotification(notification, subscriber) {\n  var onStoppedNotification = _config.config.onStoppedNotification;\n  onStoppedNotification && _timeoutProvider.timeoutProvider.setTimeout(function () {\n    return onStoppedNotification(notification, subscriber);\n  });\n}\nvar EMPTY_OBSERVER = exports.EMPTY_OBSERVER = {\n  closed: true,\n  next: _noop.noop,\n  error: defaultErrorHandler,\n  complete: _noop.noop\n};\n//# sourceMappingURL=Subscriber.js.map"},"hash":"b7c55ceb0fa8f6511ac8e1cd166a3cae"}