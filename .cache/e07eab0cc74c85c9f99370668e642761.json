{"dependencies":[{"name":"tslib","loc":{"line":1,"column":38}},{"name":"../observable/from","loc":{"line":2,"column":21}},{"name":"../operators/take","loc":{"line":3,"column":21}},{"name":"../Subject","loc":{"line":4,"column":24}},{"name":"../Subscriber","loc":{"line":5,"column":31}},{"name":"../util/lift","loc":{"line":6,"column":24}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.share = share;\n\nvar _tslib = require(\"tslib\");\n\nvar _from = require(\"../observable/from\");\n\nvar _take = require(\"../operators/take\");\n\nvar _Subject = require(\"../Subject\");\n\nvar _Subscriber = require(\"../Subscriber\");\n\nvar _lift = require(\"../util/lift\");\n\nfunction share(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.connector,\n      connector = _a === void 0 ? function () {\n    return new _Subject.Subject();\n  } : _a,\n      _b = options.resetOnError,\n      resetOnError = _b === void 0 ? true : _b,\n      _c = options.resetOnComplete,\n      resetOnComplete = _c === void 0 ? true : _c,\n      _d = options.resetOnRefCountZero,\n      resetOnRefCountZero = _d === void 0 ? true : _d;\n  return function (wrapperSource) {\n    var connection = null;\n    var resetConnection = null;\n    var subject = null;\n    var refCount = 0;\n    var hasCompleted = false;\n    var hasErrored = false;\n    var cancelReset = function () {\n      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n      resetConnection = null;\n    };\n    var reset = function () {\n      cancelReset();\n      connection = subject = null;\n      hasCompleted = hasErrored = false;\n    };\n    var resetAndUnsubscribe = function () {\n      var conn = connection;\n      reset();\n      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n    };\n    return (0, _lift.operate)(function (source, subscriber) {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n      var dest = subject = subject !== null && subject !== void 0 ? subject : connector();\n      subscriber.add(function () {\n        refCount--;\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n      dest.subscribe(subscriber);\n      if (!connection) {\n        connection = new _Subscriber.SafeSubscriber({\n          next: function (value) {\n            return dest.next(value);\n          },\n          error: function (err) {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: function () {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          }\n        });\n        (0, _from.from)(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\nfunction handleReset(reset, on) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  if (on === true) {\n    reset();\n    return null;\n  }\n  if (on === false) {\n    return null;\n  }\n  return on.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args))).pipe((0, _take.take)(1)).subscribe(function () {\n    return reset();\n  });\n}\n//# sourceMappingURL=share.js.map"},"hash":"4bf5f91a12bf8387ac0ab6dac6d85668"}