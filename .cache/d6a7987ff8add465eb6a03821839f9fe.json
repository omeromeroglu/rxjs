{"dependencies":[{"name":"tslib","loc":{"line":1,"column":26}},{"name":"./Action","loc":{"line":2,"column":23}},{"name":"./intervalProvider","loc":{"line":3,"column":33}},{"name":"../util/arrRemove","loc":{"line":4,"column":26}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AsyncAction = undefined;\n\nvar _tslib = require(\"tslib\");\n\nvar _Action = require(\"./Action\");\n\nvar _intervalProvider = require(\"./intervalProvider\");\n\nvar _arrRemove = require(\"../util/arrRemove\");\n\nvar AsyncAction = function (_super) {\n  (0, _tslib.__extends)(AsyncAction, _super);\n  function AsyncAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n    _this.scheduler = scheduler;\n    _this.work = work;\n    _this.pending = false;\n    return _this;\n  }\n  AsyncAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (this.closed) {\n      return this;\n    }\n    this.state = state;\n    var id = this.id;\n    var scheduler = this.scheduler;\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n    this.pending = true;\n    this.delay = delay;\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n    return this;\n  };\n  AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    return _intervalProvider.intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  };\n  AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (delay != null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    _intervalProvider.intervalProvider.clearInterval(id);\n    return undefined;\n  };\n  AsyncAction.prototype.execute = function (state, delay) {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n    this.pending = false;\n    var error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  };\n  AsyncAction.prototype._execute = function (state, _delay) {\n    var errored = false;\n    var errorValue;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = e ? e : new Error('Scheduled action threw falsy error');\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  };\n  AsyncAction.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      var _a = this,\n          id = _a.id,\n          scheduler = _a.scheduler;\n      var actions = scheduler.actions;\n      this.work = this.state = this.scheduler = null;\n      this.pending = false;\n      (0, _arrRemove.arrRemove)(actions, this);\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, null);\n      }\n      this.delay = null;\n      _super.prototype.unsubscribe.call(this);\n    }\n  };\n  return AsyncAction;\n}(_Action.Action);\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map"},"hash":"894e20050ae236338595dd0859b02b5e"}