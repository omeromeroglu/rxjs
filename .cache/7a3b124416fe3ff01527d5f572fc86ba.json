{"dependencies":[{"name":"tslib","loc":{"line":1,"column":25}},{"name":"../operators/map","loc":{"line":2,"column":20}},{"name":"../Observable","loc":{"line":3,"column":27}},{"name":"./AjaxResponse","loc":{"line":4,"column":29}},{"name":"./errors","loc":{"line":5,"column":44}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ajax = undefined;\nexports.fromAjax = fromAjax;\n\nvar _tslib = require(\"tslib\");\n\nvar _map = require(\"../operators/map\");\n\nvar _Observable = require(\"../Observable\");\n\nvar _AjaxResponse = require(\"./AjaxResponse\");\n\nvar _errors = require(\"./errors\");\n\nfunction ajaxGet(url, headers) {\n  return ajax({ method: 'GET', url: url, headers: headers });\n}\nfunction ajaxPost(url, body, headers) {\n  return ajax({ method: 'POST', url: url, body: body, headers: headers });\n}\nfunction ajaxDelete(url, headers) {\n  return ajax({ method: 'DELETE', url: url, headers: headers });\n}\nfunction ajaxPut(url, body, headers) {\n  return ajax({ method: 'PUT', url: url, body: body, headers: headers });\n}\nfunction ajaxPatch(url, body, headers) {\n  return ajax({ method: 'PATCH', url: url, body: body, headers: headers });\n}\nvar mapResponse = (0, _map.map)(function (x) {\n  return x.response;\n});\nfunction ajaxGetJSON(url, headers) {\n  return mapResponse(ajax({\n    method: 'GET',\n    url: url,\n    headers: headers\n  }));\n}\nvar ajax = exports.ajax = function () {\n  var create = function (urlOrConfig) {\n    var config = typeof urlOrConfig === 'string' ? {\n      url: urlOrConfig\n    } : urlOrConfig;\n    return fromAjax(config);\n  };\n  create.get = ajaxGet;\n  create.post = ajaxPost;\n  create.delete = ajaxDelete;\n  create.put = ajaxPut;\n  create.patch = ajaxPatch;\n  create.getJSON = ajaxGetJSON;\n  return create;\n}();\nvar UPLOAD = 'upload';\nvar DOWNLOAD = 'download';\nvar LOADSTART = 'loadstart';\nvar PROGRESS = 'progress';\nvar LOAD = 'load';\nfunction fromAjax(init) {\n  return new _Observable.Observable(function (destination) {\n    var _a, _b;\n    var config = (0, _tslib.__assign)({ async: true, crossDomain: false, withCredentials: false, method: 'GET', timeout: 0, responseType: 'json' }, init);\n    var queryParams = config.queryParams,\n        configuredBody = config.body,\n        configuredHeaders = config.headers;\n    var url = config.url;\n    if (!url) {\n      throw new TypeError('url is required');\n    }\n    if (queryParams) {\n      var searchParams_1;\n      if (url.includes('?')) {\n        var parts = url.split('?');\n        if (2 < parts.length) {\n          throw new TypeError('invalid url');\n        }\n        searchParams_1 = new URLSearchParams(parts[1]);\n        new URLSearchParams(queryParams).forEach(function (value, key) {\n          return searchParams_1.set(key, value);\n        });\n        url = parts[0] + '?' + searchParams_1;\n      } else {\n        searchParams_1 = new URLSearchParams(queryParams);\n        url = url + '?' + searchParams_1;\n      }\n    }\n    var headers = {};\n    if (configuredHeaders) {\n      for (var key in configuredHeaders) {\n        if (configuredHeaders.hasOwnProperty(key)) {\n          headers[key.toLowerCase()] = configuredHeaders[key];\n        }\n      }\n    }\n    var crossDomain = config.crossDomain;\n    if (!crossDomain && !('x-requested-with' in headers)) {\n      headers['x-requested-with'] = 'XMLHttpRequest';\n    }\n    var withCredentials = config.withCredentials,\n        xsrfCookieName = config.xsrfCookieName,\n        xsrfHeaderName = config.xsrfHeaderName;\n    if ((withCredentials || !crossDomain) && xsrfCookieName && xsrfHeaderName) {\n      var xsrfCookie = (_b = (_a = document === null || document === void 0 ? void 0 : document.cookie.match(new RegExp(\"(^|;\\\\s*)(\" + xsrfCookieName + \")=([^;]*)\"))) === null || _a === void 0 ? void 0 : _a.pop()) !== null && _b !== void 0 ? _b : '';\n      if (xsrfCookie) {\n        headers[xsrfHeaderName] = xsrfCookie;\n      }\n    }\n    var body = extractContentTypeAndMaybeSerializeBody(configuredBody, headers);\n    var _request = (0, _tslib.__assign)((0, _tslib.__assign)({}, config), { url: url,\n      headers: headers,\n      body: body });\n    var xhr;\n    xhr = init.createXHR ? init.createXHR() : new XMLHttpRequest();\n    {\n      var progressSubscriber_1 = init.progressSubscriber,\n          _c = init.includeDownloadProgress,\n          includeDownloadProgress = _c === void 0 ? false : _c,\n          _d = init.includeUploadProgress,\n          includeUploadProgress = _d === void 0 ? false : _d;\n      var addErrorEvent = function (type, errorFactory) {\n        xhr.addEventListener(type, function () {\n          var _a;\n          var error = errorFactory();\n          (_a = progressSubscriber_1 === null || progressSubscriber_1 === void 0 ? void 0 : progressSubscriber_1.error) === null || _a === void 0 ? void 0 : _a.call(progressSubscriber_1, error);\n          destination.error(error);\n        });\n      };\n      addErrorEvent('timeout', function () {\n        return new _errors.AjaxTimeoutError(xhr, _request);\n      });\n      addErrorEvent('abort', function () {\n        return new _errors.AjaxError('aborted', xhr, _request);\n      });\n      var createResponse_1 = function (direction, event) {\n        return new _AjaxResponse.AjaxResponse(event, xhr, _request, direction + \"_\" + event.type);\n      };\n      var addProgressEvent_1 = function (target, type, direction) {\n        target.addEventListener(type, function (event) {\n          destination.next(createResponse_1(direction, event));\n        });\n      };\n      if (includeUploadProgress) {\n        [LOADSTART, PROGRESS, LOAD].forEach(function (type) {\n          return addProgressEvent_1(xhr.upload, type, UPLOAD);\n        });\n      }\n      if (progressSubscriber_1) {\n        [LOADSTART, PROGRESS].forEach(function (type) {\n          return xhr.upload.addEventListener(type, function (e) {\n            var _a;return (_a = progressSubscriber_1 === null || progressSubscriber_1 === void 0 ? void 0 : progressSubscriber_1.next) === null || _a === void 0 ? void 0 : _a.call(progressSubscriber_1, e);\n          });\n        });\n      }\n      if (includeDownloadProgress) {\n        [LOADSTART, PROGRESS].forEach(function (type) {\n          return addProgressEvent_1(xhr, type, DOWNLOAD);\n        });\n      }\n      var emitError_1 = function (status) {\n        var msg = 'ajax error' + (status ? ' ' + status : '');\n        destination.error(new _errors.AjaxError(msg, xhr, _request));\n      };\n      xhr.addEventListener('error', function (e) {\n        var _a;\n        (_a = progressSubscriber_1 === null || progressSubscriber_1 === void 0 ? void 0 : progressSubscriber_1.error) === null || _a === void 0 ? void 0 : _a.call(progressSubscriber_1, e);\n        emitError_1();\n      });\n      xhr.addEventListener(LOAD, function (event) {\n        var _a, _b;\n        var status = xhr.status;\n        if (status < 400) {\n          (_a = progressSubscriber_1 === null || progressSubscriber_1 === void 0 ? void 0 : progressSubscriber_1.complete) === null || _a === void 0 ? void 0 : _a.call(progressSubscriber_1);\n          var response = void 0;\n          try {\n            response = createResponse_1(DOWNLOAD, event);\n          } catch (err) {\n            destination.error(err);\n            return;\n          }\n          destination.next(response);\n          destination.complete();\n        } else {\n          (_b = progressSubscriber_1 === null || progressSubscriber_1 === void 0 ? void 0 : progressSubscriber_1.error) === null || _b === void 0 ? void 0 : _b.call(progressSubscriber_1, event);\n          emitError_1(status);\n        }\n      });\n    }\n    var user = _request.user,\n        method = _request.method,\n        async = _request.async;\n    if (user) {\n      xhr.open(method, url, async, user, _request.password);\n    } else {\n      xhr.open(method, url, async);\n    }\n    if (async) {\n      xhr.timeout = _request.timeout;\n      xhr.responseType = _request.responseType;\n    }\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = _request.withCredentials;\n    }\n    for (var key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n    if (body) {\n      xhr.send(body);\n    } else {\n      xhr.send();\n    }\n    return function () {\n      if (xhr && xhr.readyState !== 4) {\n        xhr.abort();\n      }\n    };\n  });\n}\nfunction extractContentTypeAndMaybeSerializeBody(body, headers) {\n  var _a;\n  if (!body || typeof body === 'string' || isFormData(body) || isURLSearchParams(body) || isArrayBuffer(body) || isFile(body) || isBlob(body) || isReadableStream(body)) {\n    return body;\n  }\n  if (isArrayBufferView(body)) {\n    return body.buffer;\n  }\n  if (typeof body === 'object') {\n    headers['content-type'] = (_a = headers['content-type']) !== null && _a !== void 0 ? _a : 'application/json;charset=utf-8';\n    return JSON.stringify(body);\n  }\n  throw new TypeError('Unknown body type');\n}\nvar _toString = Object.prototype.toString;\nfunction toStringCheck(obj, name) {\n  return _toString.call(obj) === \"[object \" + name + \"]\";\n}\nfunction isArrayBuffer(body) {\n  return toStringCheck(body, 'ArrayBuffer');\n}\nfunction isFile(body) {\n  return toStringCheck(body, 'File');\n}\nfunction isBlob(body) {\n  return toStringCheck(body, 'Blob');\n}\nfunction isArrayBufferView(body) {\n  return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(body);\n}\nfunction isFormData(body) {\n  return typeof FormData !== 'undefined' && body instanceof FormData;\n}\nfunction isURLSearchParams(body) {\n  return typeof URLSearchParams !== 'undefined' && body instanceof URLSearchParams;\n}\nfunction isReadableStream(body) {\n  return typeof ReadableStream !== 'undefined' && body instanceof ReadableStream;\n}\n//# sourceMappingURL=ajax.js.map"},"hash":"043bee867fe00aa01b0c44cff5d5fbff"}