{"dependencies":[{"name":"tslib","loc":{"line":1,"column":38}},{"name":"../Observable","loc":{"line":2,"column":27}},{"name":"./innerFrom","loc":{"line":3,"column":26}},{"name":"../util/argsOrArgArray","loc":{"line":4,"column":31}},{"name":"./empty","loc":{"line":5,"column":22}},{"name":"../operators/OperatorSubscriber","loc":{"line":6,"column":41}},{"name":"../util/args","loc":{"line":7,"column":34}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zip = zip;\n\nvar _tslib = require(\"tslib\");\n\nvar _Observable = require(\"../Observable\");\n\nvar _innerFrom = require(\"./innerFrom\");\n\nvar _argsOrArgArray = require(\"../util/argsOrArgArray\");\n\nvar _empty = require(\"./empty\");\n\nvar _OperatorSubscriber = require(\"../operators/OperatorSubscriber\");\n\nvar _args = require(\"../util/args\");\n\nfunction zip() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var resultSelector = (0, _args.popResultSelector)(args);\n  var sources = (0, _argsOrArgArray.argsOrArgArray)(args);\n  return sources.length ? new _Observable.Observable(function (subscriber) {\n    var buffers = sources.map(function () {\n      return [];\n    });\n    var completed = sources.map(function () {\n      return false;\n    });\n    subscriber.add(function () {\n      buffers = completed = null;\n    });\n    var _loop_1 = function (sourceIndex) {\n      (0, _innerFrom.innerFrom)(sources[sourceIndex]).subscribe((0, _OperatorSubscriber.createOperatorSubscriber)(subscriber, function (value) {\n        buffers[sourceIndex].push(value);\n        if (buffers.every(function (buffer) {\n          return buffer.length;\n        })) {\n          var result = buffers.map(function (buffer) {\n            return buffer.shift();\n          });\n          subscriber.next(resultSelector ? resultSelector.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(result))) : result);\n          if (buffers.some(function (buffer, i) {\n            return !buffer.length && completed[i];\n          })) {\n            subscriber.complete();\n          }\n        }\n      }, function () {\n        completed[sourceIndex] = true;\n        !buffers[sourceIndex].length && subscriber.complete();\n      }));\n    };\n    for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n      _loop_1(sourceIndex);\n    }\n    return function () {\n      buffers = completed = null;\n    };\n  }) : _empty.EMPTY;\n}\n//# sourceMappingURL=zip.js.map"},"hash":"b66ac9d886358f8e1ef559d46c7cec3e"}